org: darinedward72
app: planet-express-orders
service: planet-express-orders

frameworkVersion: '2'


provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-2
  apiGateway:
    apiKeys:
      - planet-express-order-demo
  environment:
    PLNT_EXPRESS_TBL: planet_express_orders
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
              - PlanetExpressDB
              - Arn
package:
  patterns:
    - "!**/**"
    - "src/**"

functions:
  HttpCreateCustomer:
    handler: src.handlers.http_create_customer
    events:
      - http:
          path: v1/customer
          method: post
          private: true

  HttpCreateOrder:
    handler: src.handlers.http_create_order
    events:
      - http:
          path: v1/order
          method: post
          private: true

  HttpGetOrder:
    handler: src.handlers.http_get_domain_order
    events:
      - http:
          path: v1/order/{order_id}
          method: get
          private: true
          request:
            parameters:
              paths:
                order_id: true

          


custom:
  pythonRequirements:
    usePipenv: true
    dockerizePip: non-linux
    dockerImage: lambci/lambda:build-python3.8
    dockerSsh: true

resources:
  Resources:
    PlanetExpressDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: planet_express_orders
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements
